// Copyright 2021 PairMesh, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
option go_package = "../../message";

enum PacketType {
  // Handshake packet is use to handshake with the relay server. The handshake
  // message should be the first message between relay server and peer client.
  // The message is used to exchange the DH key and generate the shared key for
  // the subsequence messages.
  //
  // The subsequence messages will not be handled by the relay server if the
  // handshake has not completed.
  Handshake = 0; // DIRECTION: peer -> relay server (TCP)
  HandshakeAck = 1; // DIRECTION: relay server -> peer (TCP)

  // Probe packet is used to probe if peers connected to the relay server.
  ProbeRequest = 2; // DIRECTION: peer -> relay server (TCP)
  ProbeResponse = 3; // DIRECTION: relay server -> peer (TCP)

  // Heartbeat packet is used to keep alive between PairMesh node and relay servers
  Heartbeat = 4; // DIRECTION: peer <-> relay server

  // SyncPeer packet is used to synchronize the peer information between PairMesh nodes.
  SyncPeer = 5; // DIRECTION: peer <-> relay server <-> peer (TCP)

  // Forward represents the relay message which is forwarded by the relay server.
  Forward = 6; // DIRECTION: peer -> relay server -> peer (TCP)

  // PEER MESSAGE: UDP packet between peers.
  Discovery = 7; // DIRECTION: peer -> peer (UDP)

  // PEER MESSAGE: UDP packet the raw IP fragment red from virtual network device.
  Fragment = 8; // DIRECTION: peer -> peer (UDP)

  _UnitTestRequest = 99;
  _UnitTestResponse = 100;
}

message PacketHandshake {
  // Credentials encrypted by the shared key. The shared key generated by the noise protocol.
  // Workflow:
  // 1. Client fetch its primary server information from portal service.
  // 2. Client handshake with relay server and put the credentials into HandshakeMessage.
  bytes Message = 1;
  // IsPrimary indicates whether is the destination relay server the primary server of client.
  bool IsPrimary = 2;
}

message PacketHandshakeAck {
  bytes Message = 1;
}

message PacketHeartbeat {
  int64 Timestamp = 1;
}

message PacketProbeRequest {
  repeated uint64 Peers = 1;
}

message PacketProbeResponse {
  repeated uint64 OnlinePeers = 1;
  repeated uint64 OfflinePeers = 2;
}

message PacketSyncPeer {
  uint64 DstPeerID = 1;
  enum Purpose {
    Undefined = 0;
    // Catch up is used to synchronize the peer endpoints information between peers.
    // All new startup device will retrieve the peers list and send `PacketSyncEndpoints`
    // with the `Catchup` purpose message for all online devices.
    Catchup = 1;
    CatchupAck = 2;
    // All message communication via relay server by default and the `PairRequest/PairResponse`
    // purpose will try to establish P2P connection between peers.
    PairRequest = 3;
    PairResponse = 4;
    EndpointsChanged = 5;
  }
  Purpose purpose = 2;
  message Network {
    string Name = 1;
    uint64 ID = 2;
  }
  message RelayServer {
    uint64 ID = 1;
    string Name = 2;
    string Region = 3;
    string Host = 4;
    uint32 Port = 5;
    string PublicKey = 6;
  }
  message PeerInfo {
    uint64 PeerID = 1;
    uint64 UserID = 2;
    string Name = 3;
    string IPv4 = 4;
    bytes PublicKey = 5;
    RelayServer PrimaryServer = 6;
    repeated Network Networks = 7;
  }
  // Only be assigned a value if the purpose is
  PeerInfo Peer = 3;
  // Only be assigned a value if the purpose is `PairRequest/PairResponse/EndpointsChanged`
  repeated string endpoints = 4;
}

message PacketForward {
  uint64 SrcPeerID = 1;
  uint64 DstPeerID = 2;
  uint32 Nonce = 3;
  bytes Fragment = 4;
}

message PacketDiscovery {
  uint64 SenderPeerID = 1;
  // Timestamp is used to metric the latency between two peers.
  int64 Timestamp = 2;
}

message P_UnitTestRequest {
  string Field = 1;
}

message P_UnitTestResponse {
  string Field = 1;
}
