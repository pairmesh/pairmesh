// Copyright 2021 PairMesh, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.17.3
// source: packet.proto

package message

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PacketType int32

const (
	// Handshake packet is use to handshake with the relay server. The handshake
	// message should be the first message between relay server and peer client.
	// The message is used to exchange the DH key and generate the shared key for
	// the subsequence messages.
	//
	// The subsequence messages will not be handled by the relay server if the
	// handshake has not completed.
	PacketType_Handshake    PacketType = 0 // DIRECTION: peer -> relay server (TCP)
	PacketType_HandshakeAck PacketType = 1 // DIRECTION: relay server -> peer (TCP)
	// Probe packet is used to probe if peers connected to the relay server.
	PacketType_ProbeRequest  PacketType = 2 // DIRECTION: peer -> relay server (TCP)
	PacketType_ProbeResponse PacketType = 3 // DIRECTION: relay server -> peer (TCP)
	// Heartbeat packet is used to keep alive between PairMesh node and relay servers
	PacketType_Heartbeat PacketType = 4 // DIRECTION: peer <-> relay server
	// SyncPeer packet is used to synchronize the peer information between PairMesh nodes.
	PacketType_SyncPeer PacketType = 5 // DIRECTION: peer <-> relay server <-> peer (TCP)
	// Forward represents the relay message which is forwarded by the relay server.
	PacketType_Forward PacketType = 6 // DIRECTION: peer -> relay server -> peer (TCP)
	// PEER MESSAGE: UDP packet between peers.
	PacketType_Discovery PacketType = 7 // DIRECTION: peer -> peer (UDP)
	// PEER MESSAGE: UDP packet the raw IP fragment red from virtual network device.
	PacketType_Fragment          PacketType = 8 // DIRECTION: peer -> peer (UDP)
	PacketType__UnitTestRequest  PacketType = 99
	PacketType__UnitTestResponse PacketType = 100
)

// Enum value maps for PacketType.
var (
	PacketType_name = map[int32]string{
		0:   "Handshake",
		1:   "HandshakeAck",
		2:   "ProbeRequest",
		3:   "ProbeResponse",
		4:   "Heartbeat",
		5:   "SyncPeer",
		6:   "Forward",
		7:   "Discovery",
		8:   "Fragment",
		99:  "_UnitTestRequest",
		100: "_UnitTestResponse",
	}
	PacketType_value = map[string]int32{
		"Handshake":         0,
		"HandshakeAck":      1,
		"ProbeRequest":      2,
		"ProbeResponse":     3,
		"Heartbeat":         4,
		"SyncPeer":          5,
		"Forward":           6,
		"Discovery":         7,
		"Fragment":          8,
		"_UnitTestRequest":  99,
		"_UnitTestResponse": 100,
	}
)

func (x PacketType) Enum() *PacketType {
	p := new(PacketType)
	*p = x
	return p
}

func (x PacketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PacketType) Descriptor() protoreflect.EnumDescriptor {
	return file_packet_proto_enumTypes[0].Descriptor()
}

func (PacketType) Type() protoreflect.EnumType {
	return &file_packet_proto_enumTypes[0]
}

func (x PacketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PacketType.Descriptor instead.
func (PacketType) EnumDescriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{0}
}

type PacketSyncPeer_Purpose int32

const (
	PacketSyncPeer_Undefined PacketSyncPeer_Purpose = 0
	// Catch up is used to synchronize the peer endpoints information between peers.
	// All new startup device will retrieve the peers list and send `PacketSyncEndpoints`
	// with the `Catchup` purpose message for all online devices.
	PacketSyncPeer_Catchup    PacketSyncPeer_Purpose = 1
	PacketSyncPeer_CatchupAck PacketSyncPeer_Purpose = 2
	// All message communication via relay server by default and the `PairRequest/PairResponse`
	// purpose will try to establish P2P connection between peers.
	PacketSyncPeer_PairRequest      PacketSyncPeer_Purpose = 3
	PacketSyncPeer_PairResponse     PacketSyncPeer_Purpose = 4
	PacketSyncPeer_EndpointsChanged PacketSyncPeer_Purpose = 5
)

// Enum value maps for PacketSyncPeer_Purpose.
var (
	PacketSyncPeer_Purpose_name = map[int32]string{
		0: "Undefined",
		1: "Catchup",
		2: "CatchupAck",
		3: "PairRequest",
		4: "PairResponse",
		5: "EndpointsChanged",
	}
	PacketSyncPeer_Purpose_value = map[string]int32{
		"Undefined":        0,
		"Catchup":          1,
		"CatchupAck":       2,
		"PairRequest":      3,
		"PairResponse":     4,
		"EndpointsChanged": 5,
	}
)

func (x PacketSyncPeer_Purpose) Enum() *PacketSyncPeer_Purpose {
	p := new(PacketSyncPeer_Purpose)
	*p = x
	return p
}

func (x PacketSyncPeer_Purpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PacketSyncPeer_Purpose) Descriptor() protoreflect.EnumDescriptor {
	return file_packet_proto_enumTypes[1].Descriptor()
}

func (PacketSyncPeer_Purpose) Type() protoreflect.EnumType {
	return &file_packet_proto_enumTypes[1]
}

func (x PacketSyncPeer_Purpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PacketSyncPeer_Purpose.Descriptor instead.
func (PacketSyncPeer_Purpose) EnumDescriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{5, 0}
}

type PacketHandshake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey []byte `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	// Credentials encrypted by the shared key. The shared key generated by the noise protocol.
	// Workflow:
	// 1. Client fetch its primary server information from portal service.
	// 2. Client handshake with relay server and put the credentials into HandshakeMessage.
	Message []byte `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	// IsPrimary indicates whether is the destination relay server the primary server of client.
	IsPrimary bool `protobuf:"varint,3,opt,name=IsPrimary,proto3" json:"IsPrimary,omitempty"`
}

func (x *PacketHandshake) Reset() {
	*x = PacketHandshake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketHandshake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketHandshake) ProtoMessage() {}

func (x *PacketHandshake) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketHandshake.ProtoReflect.Descriptor instead.
func (*PacketHandshake) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{0}
}

func (x *PacketHandshake) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *PacketHandshake) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *PacketHandshake) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

type PacketHandshakeAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message []byte `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *PacketHandshakeAck) Reset() {
	*x = PacketHandshakeAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketHandshakeAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketHandshakeAck) ProtoMessage() {}

func (x *PacketHandshakeAck) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketHandshakeAck.ProtoReflect.Descriptor instead.
func (*PacketHandshakeAck) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{1}
}

func (x *PacketHandshakeAck) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type PacketHeartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64 `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *PacketHeartbeat) Reset() {
	*x = PacketHeartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketHeartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketHeartbeat) ProtoMessage() {}

func (x *PacketHeartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketHeartbeat.ProtoReflect.Descriptor instead.
func (*PacketHeartbeat) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{2}
}

func (x *PacketHeartbeat) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type PacketProbeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peers []uint64 `protobuf:"varint,1,rep,packed,name=Peers,proto3" json:"Peers,omitempty"`
}

func (x *PacketProbeRequest) Reset() {
	*x = PacketProbeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketProbeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketProbeRequest) ProtoMessage() {}

func (x *PacketProbeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketProbeRequest.ProtoReflect.Descriptor instead.
func (*PacketProbeRequest) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{3}
}

func (x *PacketProbeRequest) GetPeers() []uint64 {
	if x != nil {
		return x.Peers
	}
	return nil
}

type PacketProbeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlinePeers  []uint64 `protobuf:"varint,1,rep,packed,name=OnlinePeers,proto3" json:"OnlinePeers,omitempty"`
	OfflinePeers []uint64 `protobuf:"varint,2,rep,packed,name=OfflinePeers,proto3" json:"OfflinePeers,omitempty"`
}

func (x *PacketProbeResponse) Reset() {
	*x = PacketProbeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketProbeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketProbeResponse) ProtoMessage() {}

func (x *PacketProbeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketProbeResponse.ProtoReflect.Descriptor instead.
func (*PacketProbeResponse) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{4}
}

func (x *PacketProbeResponse) GetOnlinePeers() []uint64 {
	if x != nil {
		return x.OnlinePeers
	}
	return nil
}

func (x *PacketProbeResponse) GetOfflinePeers() []uint64 {
	if x != nil {
		return x.OfflinePeers
	}
	return nil
}

type PacketSyncPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DstPeerID uint64                 `protobuf:"varint,1,opt,name=DstPeerID,proto3" json:"DstPeerID,omitempty"`
	Purpose   PacketSyncPeer_Purpose `protobuf:"varint,2,opt,name=purpose,proto3,enum=PacketSyncPeer_Purpose" json:"purpose,omitempty"`
	// Only be assigned a value if the purpose is
	Peer *PacketSyncPeer_PeerInfo `protobuf:"bytes,3,opt,name=Peer,proto3" json:"Peer,omitempty"`
	// Only be assigned a value if the purpose is `PairRequest/PairResponse/EndpointsChanged`
	Endpoints []string `protobuf:"bytes,4,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
}

func (x *PacketSyncPeer) Reset() {
	*x = PacketSyncPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketSyncPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketSyncPeer) ProtoMessage() {}

func (x *PacketSyncPeer) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketSyncPeer.ProtoReflect.Descriptor instead.
func (*PacketSyncPeer) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{5}
}

func (x *PacketSyncPeer) GetDstPeerID() uint64 {
	if x != nil {
		return x.DstPeerID
	}
	return 0
}

func (x *PacketSyncPeer) GetPurpose() PacketSyncPeer_Purpose {
	if x != nil {
		return x.Purpose
	}
	return PacketSyncPeer_Undefined
}

func (x *PacketSyncPeer) GetPeer() *PacketSyncPeer_PeerInfo {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *PacketSyncPeer) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

type PacketForward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcPeerID uint64 `protobuf:"varint,1,opt,name=SrcPeerID,proto3" json:"SrcPeerID,omitempty"`
	DstPeerID uint64 `protobuf:"varint,2,opt,name=DstPeerID,proto3" json:"DstPeerID,omitempty"`
	Nonce     uint32 `protobuf:"varint,3,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Fragment  []byte `protobuf:"bytes,4,opt,name=Fragment,proto3" json:"Fragment,omitempty"`
}

func (x *PacketForward) Reset() {
	*x = PacketForward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketForward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketForward) ProtoMessage() {}

func (x *PacketForward) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketForward.ProtoReflect.Descriptor instead.
func (*PacketForward) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{6}
}

func (x *PacketForward) GetSrcPeerID() uint64 {
	if x != nil {
		return x.SrcPeerID
	}
	return 0
}

func (x *PacketForward) GetDstPeerID() uint64 {
	if x != nil {
		return x.DstPeerID
	}
	return 0
}

func (x *PacketForward) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *PacketForward) GetFragment() []byte {
	if x != nil {
		return x.Fragment
	}
	return nil
}

type PacketDiscovery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderPeerID uint64 `protobuf:"varint,1,opt,name=SenderPeerID,proto3" json:"SenderPeerID,omitempty"`
	// Timestamp is used to metric the latency between two peers.
	Timestamp int64 `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *PacketDiscovery) Reset() {
	*x = PacketDiscovery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketDiscovery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketDiscovery) ProtoMessage() {}

func (x *PacketDiscovery) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketDiscovery.ProtoReflect.Descriptor instead.
func (*PacketDiscovery) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{7}
}

func (x *PacketDiscovery) GetSenderPeerID() uint64 {
	if x != nil {
		return x.SenderPeerID
	}
	return 0
}

func (x *PacketDiscovery) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type P_UnitTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=Field,proto3" json:"Field,omitempty"`
}

func (x *P_UnitTestRequest) Reset() {
	*x = P_UnitTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P_UnitTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P_UnitTestRequest) ProtoMessage() {}

func (x *P_UnitTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P_UnitTestRequest.ProtoReflect.Descriptor instead.
func (*P_UnitTestRequest) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{8}
}

func (x *P_UnitTestRequest) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type P_UnitTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=Field,proto3" json:"Field,omitempty"`
}

func (x *P_UnitTestResponse) Reset() {
	*x = P_UnitTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P_UnitTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P_UnitTestResponse) ProtoMessage() {}

func (x *P_UnitTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P_UnitTestResponse.ProtoReflect.Descriptor instead.
func (*P_UnitTestResponse) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{9}
}

func (x *P_UnitTestResponse) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type PacketSyncPeer_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	ID   uint64 `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *PacketSyncPeer_Network) Reset() {
	*x = PacketSyncPeer_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketSyncPeer_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketSyncPeer_Network) ProtoMessage() {}

func (x *PacketSyncPeer_Network) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketSyncPeer_Network.ProtoReflect.Descriptor instead.
func (*PacketSyncPeer_Network) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{5, 0}
}

func (x *PacketSyncPeer_Network) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PacketSyncPeer_Network) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type PacketSyncPeer_RelayServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Region    string `protobuf:"bytes,3,opt,name=Region,proto3" json:"Region,omitempty"`
	Host      string `protobuf:"bytes,4,opt,name=Host,proto3" json:"Host,omitempty"`
	Port      uint32 `protobuf:"varint,5,opt,name=Port,proto3" json:"Port,omitempty"`
	PublicKey string `protobuf:"bytes,6,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
}

func (x *PacketSyncPeer_RelayServer) Reset() {
	*x = PacketSyncPeer_RelayServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketSyncPeer_RelayServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketSyncPeer_RelayServer) ProtoMessage() {}

func (x *PacketSyncPeer_RelayServer) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketSyncPeer_RelayServer.ProtoReflect.Descriptor instead.
func (*PacketSyncPeer_RelayServer) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{5, 1}
}

func (x *PacketSyncPeer_RelayServer) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PacketSyncPeer_RelayServer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PacketSyncPeer_RelayServer) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *PacketSyncPeer_RelayServer) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PacketSyncPeer_RelayServer) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PacketSyncPeer_RelayServer) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

type PacketSyncPeer_PeerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerID        uint64                      `protobuf:"varint,1,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	UserID        uint64                      `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Name          string                      `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	IPv4          string                      `protobuf:"bytes,4,opt,name=IPv4,proto3" json:"IPv4,omitempty"`
	PublicKey     []byte                      `protobuf:"bytes,5,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	PrimaryServer *PacketSyncPeer_RelayServer `protobuf:"bytes,6,opt,name=PrimaryServer,proto3" json:"PrimaryServer,omitempty"`
	Networks      []*PacketSyncPeer_Network   `protobuf:"bytes,7,rep,name=Networks,proto3" json:"Networks,omitempty"`
}

func (x *PacketSyncPeer_PeerInfo) Reset() {
	*x = PacketSyncPeer_PeerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketSyncPeer_PeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketSyncPeer_PeerInfo) ProtoMessage() {}

func (x *PacketSyncPeer_PeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketSyncPeer_PeerInfo.ProtoReflect.Descriptor instead.
func (*PacketSyncPeer_PeerInfo) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{5, 2}
}

func (x *PacketSyncPeer_PeerInfo) GetPeerID() uint64 {
	if x != nil {
		return x.PeerID
	}
	return 0
}

func (x *PacketSyncPeer_PeerInfo) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *PacketSyncPeer_PeerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PacketSyncPeer_PeerInfo) GetIPv4() string {
	if x != nil {
		return x.IPv4
	}
	return ""
}

func (x *PacketSyncPeer_PeerInfo) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *PacketSyncPeer_PeerInfo) GetPrimaryServer() *PacketSyncPeer_RelayServer {
	if x != nil {
		return x.PrimaryServer
	}
	return nil
}

func (x *PacketSyncPeer_PeerInfo) GetNetworks() []*PacketSyncPeer_Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

var File_packet_proto protoreflect.FileDescriptor

var file_packet_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x67,
	0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x2e, 0x0a, 0x12, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2f, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x2a, 0x0a, 0x12, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x65, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x50,
	0x65, 0x65, 0x72, 0x73, 0x22, 0x5b, 0x0a, 0x13, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x65, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x0c, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x22, 0xd9, 0x05, 0x0a, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63,
	0x50, 0x65, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x44, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63,
	0x50, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x07, 0x70, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63,
	0x50, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x50,
	0x65, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x1a, 0x2d, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44,
	0x1a, 0x8f, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x48, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x1a, 0xf8, 0x01, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x49, 0x50, 0x76, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0d, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x08, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x08, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x6e, 0x0a,
	0x07, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x61, 0x74, 0x63, 0x68,
	0x75, 0x70, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x41,
	0x63, 0x6b, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x05, 0x22, 0x7d, 0x0a,
	0x0d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x72, 0x63, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x53, 0x72, 0x63, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x44, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x44, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x53, 0x0a, 0x0f,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x65, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x29, 0x0a, 0x11, 0x50, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x2a, 0x0a, 0x12,
	0x50, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2a, 0xc6, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x73,
	0x68, 0x61, 0x6b, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68,
	0x61, 0x6b, 0x65, 0x41, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x79, 0x6e, 0x63, 0x50, 0x65, 0x65, 0x72, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x63, 0x12, 0x15, 0x0a, 0x11, 0x5f, 0x55,
	0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0x64, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_packet_proto_rawDescOnce sync.Once
	file_packet_proto_rawDescData = file_packet_proto_rawDesc
)

func file_packet_proto_rawDescGZIP() []byte {
	file_packet_proto_rawDescOnce.Do(func() {
		file_packet_proto_rawDescData = protoimpl.X.CompressGZIP(file_packet_proto_rawDescData)
	})
	return file_packet_proto_rawDescData
}

var file_packet_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_packet_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_packet_proto_goTypes = []interface{}{
	(PacketType)(0),                    // 0: PacketType
	(PacketSyncPeer_Purpose)(0),        // 1: PacketSyncPeer.Purpose
	(*PacketHandshake)(nil),            // 2: PacketHandshake
	(*PacketHandshakeAck)(nil),         // 3: PacketHandshakeAck
	(*PacketHeartbeat)(nil),            // 4: PacketHeartbeat
	(*PacketProbeRequest)(nil),         // 5: PacketProbeRequest
	(*PacketProbeResponse)(nil),        // 6: PacketProbeResponse
	(*PacketSyncPeer)(nil),             // 7: PacketSyncPeer
	(*PacketForward)(nil),              // 8: PacketForward
	(*PacketDiscovery)(nil),            // 9: PacketDiscovery
	(*P_UnitTestRequest)(nil),          // 10: P_UnitTestRequest
	(*P_UnitTestResponse)(nil),         // 11: P_UnitTestResponse
	(*PacketSyncPeer_Network)(nil),     // 12: PacketSyncPeer.Network
	(*PacketSyncPeer_RelayServer)(nil), // 13: PacketSyncPeer.RelayServer
	(*PacketSyncPeer_PeerInfo)(nil),    // 14: PacketSyncPeer.PeerInfo
}
var file_packet_proto_depIdxs = []int32{
	1,  // 0: PacketSyncPeer.purpose:type_name -> PacketSyncPeer.Purpose
	14, // 1: PacketSyncPeer.Peer:type_name -> PacketSyncPeer.PeerInfo
	13, // 2: PacketSyncPeer.PeerInfo.PrimaryServer:type_name -> PacketSyncPeer.RelayServer
	12, // 3: PacketSyncPeer.PeerInfo.Networks:type_name -> PacketSyncPeer.Network
	4,  // [4:4] is the sub-list for method output_type
	4,  // [4:4] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_packet_proto_init() }
func file_packet_proto_init() {
	if File_packet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_packet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketHandshake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketHandshakeAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketHeartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketProbeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketProbeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketSyncPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketForward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketDiscovery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P_UnitTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P_UnitTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketSyncPeer_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketSyncPeer_RelayServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketSyncPeer_PeerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_packet_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_packet_proto_goTypes,
		DependencyIndexes: file_packet_proto_depIdxs,
		EnumInfos:         file_packet_proto_enumTypes,
		MessageInfos:      file_packet_proto_msgTypes,
	}.Build()
	File_packet_proto = out.File
	file_packet_proto_rawDesc = nil
	file_packet_proto_goTypes = nil
	file_packet_proto_depIdxs = nil
}
